tt <- c(model.list[x],"3 years",MAD.3,MAPE.3,MPE.3,MAAPE.3)
master.summary[nrow(master.summary) + 1,] <- tt
df <- data.frame(matrix(vector(), a + 1, 3,
dimnames=list(c(), c("r.sq", "p.value", "forecast"))),
stringsAsFactors=F)
} # end model.list loop
temp2 <- master.summary %>%
mutate(MAD = as.numeric(MAD)) %>%
mutate(MAPE = as.numeric(MAPE)) %>%
mutate(MPE = as.numeric(MPE)) %>%
mutate(MAAPE = as.numeric(MAAPE)) %>%
group_by("model")
temp2
temp3 <- temp2 %>%
formattable(temp2,
align = c("l",rep("r", NCOL(temp2) - 1)),
list("model" = formatter("span", style = ~ style(color = "grey", font.weight = "bold")),
"MAD" = color_bar("#FA614B"),
"MAPE" = color_bar("#6b4596b2"),
"MPE" = color_bar("#95D840FF"),
"MAAPE" = color_bar("#DCE319FF")))
temp3
master.summary
str(master.summary)
temp2
temp2 <- master.summary %>%
mutate(MAD = as.numeric(MAD)) %>%
mutate(MAD = round(MAD)) %>%
mutate(MAPE = as.numeric(MAPE)) %>%
mutate(MPE = as.numeric(MPE)) %>%
mutate(MAAPE = as.numeric(MAAPE)) %>%
group_by("model")
temp2
temp2 <- master.summary %>%
mutate(MAD = as.numeric(MAD)) %>%
mutate(MAD = round(MAD)) %>%
mutate(MAPE = as.numeric(MAPE)) %>%
mutate(MAPE = formattable:::percent(MAPE)) %>%
mutate(MPE = as.numeric(MPE)) %>%
mutate(MPE = formattable:::percent(MPE)) %>%
mutate(MAAPE = as.numeric(MAAPE)) %>%
group_by("model")
temp2
temp3 <- temp2 %>%
formattable(temp2,
align = c("l",rep("r", NCOL(temp2) - 1)),
list("model" = formatter("span", style = ~ style(color = "grey", font.weight = "bold")),
"MAD" = color_bar("#FA614B"),
"MAPE" = color_bar("#6b4596b2"),
"MPE" = color_bar("#95D840FF"),
"MAAPE" = color_bar("#DCE319FF")))
temp3
temp2 <- master.summary %>%
mutate(MAD = as.numeric(MAD)) %>%
mutate(MAD = round(MAD)) %>%
mutate(MAPE = as.numeric(MAPE)) %>%
mutate(MAPE = formattable:::percent(MAPE)) %>%
mutate(MPE = as.numeric(MPE)) %>%
mutate(MPE = formattable:::percent(MPE)) %>%
mutate(MAAPE = as.numeric(MAAPE)) %>%
mutate(MAAPE = round(MAAPE, digits = 2)) %>%
group_by("model")
temp2
temp2 <- master.summary %>%
mutate(MAD = as.numeric(MAD)) %>%
mutate(MAD = round(MAD)) %>%
mutate(MAPE = as.numeric(MAPE)) %>%
mutate(MAPE = formattable:::percent(MAPE)) %>%
mutate(MPE = as.numeric(MPE)) %>%
mutate(MPE = formattable:::percent(MPE)) %>%
mutate(MAAPE = as.numeric(MAAPE)) %>%
mutate(MAAPE = round(MAAPE, digits = 2)) %>%
group_by(model)
temp2
temp3 <- formattable(temp2,
align = c("l",rep("r", NCOL(temp2) - 1)),
list("model" = formatter("span", style = ~ style(color = "grey", font.weight = "bold")),
"MAD" = color_bar("#FA614B"),
"MAPE" = color_bar("#6b4596b2"),
"MPE" = color_bar("#95D840FF"),
"MAAPE" = color_bar("#DCE319FF")))
temp3
temp2 <- master.summary %>%
mutate(MAD = as.numeric(MAD)) %>%
mutate(MAD = round(MAD)) %>%
mutate(MAD = format(MAD, big.mark = ",")) %>%
mutate(MAPE = as.numeric(MAPE)) %>%
mutate(MAPE = formattable:::percent(MAPE)) %>%
mutate(MPE = as.numeric(MPE)) %>%
mutate(MPE = formattable:::percent(MPE)) %>%
mutate(MAAPE = as.numeric(MAAPE)) %>%
mutate(MAAPE = round(MAAPE, digits = 2)) %>%
group_by(model)
temp3 <- formattable(temp2,
align = c("l",rep("r", NCOL(temp2) - 1)),
list("model" = formatter("span", style = ~ style(color = "grey", font.weight = "bold")),
"MAD" = color_bar("#FA614B"),
"MAPE" = color_bar("#6b4596b2"),
"MPE" = color_bar("#95D840FF"),
"MAAPE" = color_bar("#DCE319FF")))
temp3
# set variables
f.cast.age <- "age.12"
sibling <- "age.11"
f.cast.yr <- 2020
riv.name <- "KVICHAK"
start.yr <- 1972
model <- "sibling"
data <- "C:/inseason/2019_BBay_Brood_Tables.xlsx"
data2 <- "C:/inseason/2019_BBay_Return_Tables.xlsx"
f.cast.age <- "age.12"
sibling <- "age.11"
#read brood tables into memory
riv <- read_excel(data,
sheet = riv.name , col_types = "numeric", skip = 1)
t <- c("brood.year","age.01","age.02","age.03","age.04","age.05","age.11","age.12",
"age.13","age.14","age.15","age.21","age.22","age.23","age.24","age.31","age.32",
"age.33","age.34","escapement","recruits","r.per.s")
tt <- as.vector(t)
names(riv)<-t
riv$return.year <- riv$brood.year + as.numeric(substr(f.cast.age,5,5)) + as.numeric(substr(f.cast.age,6,6)) + 1
dat <- riv[(riv$brood.year >= start.yr & riv$return.year <= f.cast.yr),
c("brood.year","return.year","escapement",sibling,f.cast.age)]
names(dat) <- c("brood.year","return.year","spawners","sibling","f.cast.age")
a <- nrow(dat)
# create empty data frame to collect stats
master.summary <- data.frame(model=character(),
range=character(),
MAD=integer(),
MAPE=integer(),
MPE=integer(),
MAAPE=integer(),
stringsAsFactors=FALSE)
df <- data.frame(matrix(vector(), a + 1, 3,
dimnames=list(c(), c("r.sq", "p.value", "forecast"))),
stringsAsFactors=F)
# model list
model.list <- c("sibling","ln.sibling","lnY.sibling","lnS.lnR","ricker","average")
#model.list <- c("sibling","ln.sibling","lnY.sibling","lnS.lnR","ricker")
# loop through model list
for(x in 1:6){
# loop through models collecting stats--SIBLING
if(model.list[x] == "sibling"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- sib.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"sibling"])
df[a-i,"r.sq"] <- sib.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- sib.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--LN.SIBLING
if(model.list[x] == "ln.sibling"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- ln.sib.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"sibling"])
df[a-i,"r.sq"] <- ln.sib.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- ln.sib.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--LNY.SIBLING
if(model.list[x] == "lnY.sibling"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- lnY.sib.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"sibling"])
df[a-i,"r.sq"] <- lnY.sib.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- lnY.sib.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--RICKER
if(model.list[x] == "ricker"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- ricker.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"spawners"])
df[a-i,"r.sq"] <- ricker.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- ricker.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--LNS.LNR
if(model.list[x] == "lnS.lnR"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- lnS.lnR.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"spawners"])
df[a-i,"r.sq"] <- lnS.lnR.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- lnS.lnR.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--average
if(model.list[x] == "average"){
dat <-  mutate(dat, temp = frollmean(f.cast.age, n = 5))
a <- as.vector(dat$temp)
b <- length(a)
a <- prepend(a,0,before = 1)
a <- a[1:b]
dat <- cbind(dat,a)
dat <- dat[,c("brood.year","return.year","spawners","sibling","f.cast.age","a")]
names(dat) <- c("brood.year","return.year","spawners","sibling","f.cast.age","forecast")
dat$r.sq <- ""
dat$p.value <- ""
master <- dat
} # end if
# truncates table to most recent years
temp <- master %>%
filter(return.year > f.cast.yr - 10) %>%
mutate(AD = abs(forecast - f.cast.age)) %>%
mutate(APE = abs(1 - forecast/f.cast.age)) %>%
mutate(PE = 1 - forecast/f.cast.age) %>%
mutate(AAPE = atan(abs((f.cast.age - forecast)/f.cast.age)))
summary5.temp <- temp %>%
filter((return.year < f.cast.yr) & (return.year > (f.cast.yr - 6)))
MAD.5 <- mean(summary5.temp$AD)
MAPE.5 <- mean(summary5.temp$APE)
MPE.5 <- mean(summary5.temp$PE)
MAAPE.5 <- mean(summary5.temp$AAPE)
t <- c(model.list[x],"5 years",MAD.5,MAPE.5,MPE.5,MAAPE.5)
master.summary[nrow(master.summary) + 1,] <- t
summary3.temp <- temp %>%
filter((return.year < f.cast.yr) & (return.year > (f.cast.yr - 4)))
MAD.3 <- mean(summary3.temp$AD)
MAPE.3 <- mean(summary3.temp$APE)
MPE.3 <- mean(summary3.temp$PE)
MAAPE.3 <- mean(summary3.temp$AAPE)
tt <- c(model.list[x],"3 years",MAD.3,MAPE.3,MPE.3,MAAPE.3)
master.summary[nrow(master.summary) + 1,] <- tt
df <- data.frame(matrix(vector(), a + 1, 3,
dimnames=list(c(), c("r.sq", "p.value", "forecast"))),
stringsAsFactors=F)
} # end model.list loop
temp2 <- master.summary %>%
mutate(MAD = as.numeric(MAD)) %>%
mutate(MAD = round(MAD)) %>%
mutate(MAD = format(MAD, big.mark = ",")) %>%
mutate(MAPE = as.numeric(MAPE)) %>%
mutate(MAPE = formattable:::percent(MAPE)) %>%
mutate(MPE = as.numeric(MPE)) %>%
mutate(MPE = formattable:::percent(MPE)) %>%
mutate(MAAPE = as.numeric(MAAPE)) %>%
mutate(MAAPE = round(MAAPE, digits = 2)) %>%
group_by(model)
temp3 <- formattable(temp2,
align = c("l",rep("r", NCOL(temp2) - 1)),
list("model" = formatter("span", style = ~ style(color = "grey", font.weight = "bold")),
"MAD" = color_bar("#FA614B"),
"MAPE" = color_bar("#6b4596b2"),
"MPE" = color_bar("#95D840FF"),
"MAAPE" = color_bar("#DCE319FF")))
temp3
# set variables
f.cast.age <- "age.12"
sibling <- "age.11"
f.cast.yr <- 2021
riv.name <- "TOGIAK"
start.yr <- 1972
model <- "sibling"
data <- "C:/inseason/2020_BBay_Brood_Tables.xlsx"
data2 <- "C:/inseason/2020_BBay_Return_Table.xlsx"
f.cast.age <- "age.12"
sibling <- "age.11"
#read brood tables into memory
riv <- read_excel(data,
sheet = riv.name , col_types = "numeric", skip = 1)
t <- c("brood.year","age.01","age.02","age.03","age.04","age.05","age.11","age.12",
"age.13","age.14","age.15","age.21","age.22","age.23","age.24","age.31","age.32",
"age.33","age.34","escapement","recruits","r.per.s")
tt <- as.vector(t)
names(riv)<-t
riv$return.year <- riv$brood.year + as.numeric(substr(f.cast.age,5,5)) + as.numeric(substr(f.cast.age,6,6)) + 1
dat <- riv[(riv$brood.year >= start.yr & riv$return.year <= f.cast.yr),
c("brood.year","return.year","escapement",sibling,f.cast.age)]
names(dat) <- c("brood.year","return.year","spawners","sibling","f.cast.age")
# create empty data frame to collect stats
a <- nrow(dat)
df <- data.frame(matrix(vector(), a + 1, 3,
dimnames=list(c(), c("r.sq", "p.value", "forecast"))),
stringsAsFactors=F)
suppressMessages(library(readxl))
suppressMessages(library(data.table))
suppressMessages(library(knitr))
suppressMessages(library(lubridate))
suppressMessages(library(ggplot2))
suppressMessages(library(kableExtra))
suppressMessages(library(useful))
suppressMessages(library(dplyr))
suppressMessages(library(pander))
suppressMessages(library(plotly))
suppressMessages(library(formattable))
suppressMessages(library(devtools))
suppressMessages(library(tidyverse))
install_github("GregBuck/bbay.fcast")
suppressMessages(library(bbay.fcast))
#read brood tables into memory
riv <- read_excel(data,
sheet = riv.name , col_types = "numeric", skip = 1)
t <- c("brood.year","age.01","age.02","age.03","age.04","age.05","age.11","age.12",
"age.13","age.14","age.15","age.21","age.22","age.23","age.24","age.31","age.32",
"age.33","age.34","escapement","recruits","r.per.s")
tt <- as.vector(t)
names(riv)<-t
riv$return.year <- riv$brood.year + as.numeric(substr(f.cast.age,5,5)) + as.numeric(substr(f.cast.age,6,6)) + 1
dat <- riv[(riv$brood.year >= start.yr & riv$return.year <= f.cast.yr),
c("brood.year","return.year","escapement",sibling,f.cast.age)]
names(dat) <- c("brood.year","return.year","spawners","sibling","f.cast.age")
# create empty data frame to collect stats
a <- nrow(dat)
df <- data.frame(matrix(vector(), a + 1, 3,
dimnames=list(c(), c("r.sq", "p.value", "forecast"))),
stringsAsFactors=F)
# loop through models collecting stats--SIBLING
if(model == "sibling"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- sib.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"sibling"])
df[a-i,"r.sq"] <- sib.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- sib.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--LN.SIBLING
if(model == "ln.sibling"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- ln.sib.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"sibling"])
df[a-i,"r.sq"] <- ln.sib.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- ln.sib.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--LNY.SIBLING
if(model == "lnY.sibling"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- lnY.sib.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"sibling"])
df[a-i,"r.sq"] <- lnY.sib.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- lnY.sib.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--RICKER
if(model == "ricker"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- ricker.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"spawners"])
df[a-i,"r.sq"] <- ricker.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- ricker.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--LNS.LNR
if(model == "lnS.lnR"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- lnS.lnR.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"spawners"])
df[a-i,"r.sq"] <- lnS.lnR.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- lnS.lnR.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"spawners"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# loop through models collecting stats--average
if(model == "average"){
dat <-  mutate(dat, temp = frollmean(f.cast.age, n = 5))
a <- as.vector(dat$temp)
b <- length(a)
a <- prepend(a,0,before = 1)
a <- a[1:b]
dat <- cbind(dat,a)
dat <- dat[,c("brood.year","return.year","spawners","sibling","f.cast.age","a")]
names(dat) <- c("brood.year","return.year","spawners","sibling","f.cast.age","forecast")
dat$r.sq <- ""
dat$p.value <- ""
master <- dat
} # end if
sib.forecast <- function(sibling,forecast.age,input){
sibling <- apply(sibling,2,unlist)
forecast.age <- apply(forecast.age,2,unlist)
dat <- data.frame(sibling,forecast.age)
mod <- lm(forecast.age~sibling,data = dat)
summary(mod)$coefficients[2,4]
predict(mod,data.frame(sibling = input))
}
#' sibling R-square
#'
#' Returns the R-square of a linear regression of sibling returns
#' @param sibling A tible with one column
#' @param forecast.age A tible with one column
#' @keywords sibling
#' @export
#' @examples
#' sib.rsquare()
sib.rsquare <- function(sibling,forecast.age){
sibling <- apply(sibling,2,unlist)
forecast.age <- apply(forecast.age,2,unlist)
dat <- data.frame(sibling,forecast.age)
mod <- lm(forecast.age~sibling,data = dat)
summary(mod)$adj.r.squared
}
#' sibling p-value
#'
#' Returns the slope p-value of a linear regression of sibling returns
#' @param sibling A tible with one column
#' @param forecast.age A tible with one column
#' @keywords sibling
#' @export
#' @examples
#' sib.pvalue()
sib.pvalue <- function(sibling,forecast.age,bb.riv){
sibling <- apply(sibling,2,unlist)
forecast.age <- apply(forecast.age,2,unlist)
dat <- data.frame(sibling,forecast.age)
mod <- lm(forecast.age~sibling,data = dat)
summary(mod)$coefficients[2,4]
}
# loop through models collecting stats--SIBLING
if(model == "sibling"){
for (i in 0:9){
tmp <- dat[1:(nrow(dat)-i),]
df[a-i,"forecast"] <- sib.forecast(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"],
tmp[tmp$return.year==f.cast.yr-i,"sibling"])
df[a-i,"r.sq"] <- sib.rsquare(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
df[a-i,"p.value"] <- sib.pvalue(tmp[tmp$return.year <= f.cast.yr -1-i,"sibling"],
tmp[tmp$return.year <= f.cast.yr -1- i,"f.cast.age"])
} # end for
# merge initial dataframe with stats dataframe
df <- df[1:(nrow(df)-1),]
master <- cbind(dat,df)
} # end if
# truncates table to most recent years
temp <- master %>%
filter(return.year > f.cast.yr - 10) %>%
mutate(AD = abs(forecast - f.cast.age)) %>%
mutate(PE = (1 - f.cast.age/forecast) %>%
mutate(APE = abs(PE)) %>%
mutate(AAPE = atan(abs((f.cast.age - forecast)/f.cast.age))) %>%
mutate(brood.year = as.character(brood.year)) %>%
mutate(return.year = as.character(return.year))
temp
master
# truncates table to most recent years
temp <- master %>%
filter(return.year > f.cast.yr - 10) %>%
mutate(AD = abs(forecast - f.cast.age)) %>%
mutate(PE = 1 - f.cast.age/forecast) %>%
mutate(APE = abs(PE)) %>%
mutate(AAPE = atan(abs((f.cast.age - forecast)/f.cast.age))) %>%
mutate(brood.year = as.character(brood.year)) %>%
mutate(return.year = as.character(return.year))
temp
